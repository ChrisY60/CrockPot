@model IEnumerable<CrockPot.Models.Recipe>
@using Microsoft.AspNetCore.Identity

@{
    ViewData["Title"] = "Recipes";
}

<h1>Recipes</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>

@{
    var authorNames = ViewData["AuthorNames"] as Dictionary<string, string>;
}


@foreach (var item in Model)
{
    string imageSrc = string.IsNullOrEmpty(item.ImageUrl)
        ? "https://crockpotblob2005.blob.core.windows.net/images/unknown_food.png"
        : item.ImageUrl;

    <button class="display_box" onclick="window.location.href = '@Url.Action("Details", "Recipes")/' + @item.Id;">
        <div class="display_box_image">
            <img src="@imageSrc" />
        </div>

        <div>
            <span>Name: </span>
            @Html.Raw(Truncate(item.Name, 7))
            <br>
            <span>Description: </span>
            @Html.Raw(Truncate(item.Description, 7))
            <br>
            <span>Ingredients: </span>
            @Html.Raw(Truncate(string.Join(", ", item.Ingredients?.Select(i => i.Name)), 7))
            <br>
            <span>By: </span>
            @{
                string name = "Unknown";
                if (authorNames[item.AuthorId] != null){
                    name = authorNames[item.AuthorId];
                }
                

            }
            @Html.Raw(name)
            <br>
            <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
            <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
        </div>
        
    </button>
}

@functions {
    string Truncate(string input, int length)
    {
        if (input.Length <= length)
        {
            return input;
        }
        else
        {
            return input.Substring(0, length) + "...";
        }
    }
}
